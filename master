import os
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import json
import re
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinterweb import HtmlFrame
import base64
import io
import urllib.parse  # Import for URL parsing

GEMINI_API_KEY = "AIzaSyBk7K4AH7QmALET8dZRdAAuCC5jsyWrbFM"  # Replace with your actual API key

def call_gemini_api(image_path, doc_type):
    """
    Calls the Gemini API to analyze the image using the `google.generativeai` library.
    """
    print(f"Calling Gemini API to process: {image_path} as {doc_type}")

    try:
        import google.generativeai as genai
        genai.configure(api_key=GEMINI_API_KEY)

        # Open the image
        image_data = open(image_path, "rb").read()

        # Create a model
        model = genai.GenerativeModel('gemini-2.0-flash')

        # Create prompt
        prompt_text = f"Extract all relevant information from this {doc_type.replace('_', ' ')} and return it as a JSON object. You have to check whether it is an aadhar card or a passport. The first entry in the json object should be of the format 'document_type' = 'passport' if it is a passport or 'aadhar' if it is an aadhar card. If it is a passport then make sure to recheck the details with the MRZ code at the bottom. If you feel that at any point in any image, any word/s is/are unreadable, then return with just a blurness = unreadable, in the json object. If the image is unreadable then remove the document_type from the json object."

        # Generate content
        response = model.generate_content([{"mime_type": "image/jpeg", "data": image_data}, prompt_text])

        # Get the response text
        response_text = response.text
        print(f"Gemini API Response: {response_text}")

        # Clean the response text if it contains markdown code blocks
        # This regex removes markdown code block syntax like ```json and ```
        cleaned_text = re.sub(r'```json\s*|\s*```', '', response_text).strip()

        try:
            structured_data = json.loads(cleaned_text)
            return structured_data
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from Gemini API response: {e}")
            return {"error": "Invalid JSON response from Gemini API", "raw_response": response_text}

    except Exception as e:
        print(f"Error calling Gemini API: {e}")
        return {"error": str(e)}


class DocumentScannerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Document Scanner")
        self.root.geometry("1000x600")
        self.root.minsize(800, 600)

        # Set theme
        self.style = ttk.Style(theme="cosmo")

        # Set the output directory
        self.output_directory = os.path.join(os.path.expanduser("~"), "Desktop", "documentscanner_new")
        os.makedirs(self.output_directory, exist_ok=True)

        self.selected_files = []
        self.no_of_selected_files = 0

        # Create main frame
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=BOTH, expand=YES)

        # Create navbar
        self.create_navbar()

        # Create welcome screen
        self.create_welcome_screen()

    def create_navbar(self):
        navbar = ttk.Frame(self.main_frame, bootstyle="primary")
        navbar.pack(fill=X, side=TOP)

        # Logo and title
        title_frame = ttk.Frame(navbar, bootstyle="primary")
        title_frame.pack(side=LEFT, padx=10, pady=5)

        logo_label = ttk.Label(title_frame, text="ðŸ“„", font=("Arial", 20), bootstyle="inverse-primary")
        logo_label.pack(side=LEFT, padx=(0, 5))

        title_label = ttk.Label(title_frame, text="Document Scanner", font=("Arial", 16, "bold"),
                                bootstyle="inverse-primary")
        title_label.pack(side=LEFT)

        # Navigation buttons
        nav_frame = ttk.Frame(navbar, bootstyle="primary")
        nav_frame.pack(side=RIGHT, padx=10)

        home_btn = ttk.Button(nav_frame, text="Home", bootstyle="outline-light", command=self.create_welcome_screen)
        home_btn.pack(side=LEFT, padx=5)

        about_btn = ttk.Button(nav_frame, text="About", bootstyle="outline-light",
                               command=lambda: self.show_about_dialog())
        about_btn.pack(side=LEFT, padx=5)

        exit_btn = ttk.Button(nav_frame, text="Exit", bootstyle="outline-danger", command=self.root.quit)
        exit_btn.pack(side=LEFT, padx=5)

    def clear_main_content(self):
        # Clear all widgets in the main content area
        for widget in self.main_frame.winfo_children():
            if widget != self.main_frame.winfo_children()[0]:  # Skip navbar
                widget.destroy()

    def create_welcome_screen(self):
        self.clear_main_content()

        # Create main content
        content_frame = ttk.Frame(self.main_frame)
        content_frame.pack(fill=BOTH, expand=YES, padx=20, pady=20)

        # Create HTML frame for welcome screen
        self.html_frame = HtmlFrame(content_frame)  # Store the HtmlFrame as an instance variable
        self.html_frame.pack(fill=BOTH, expand=YES)

        # Load HTML content
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: #f8f9fa;
                    color: #212529;
                }
                .container {
                    max-width: 900px;
                    margin: 0 auto;
                    padding: 20px;
                    text-align: center;
                }
                h1 {
                    color: #0d6efd;
                    margin-bottom: 30px;
                    font-size: 36px;
                }
                .card-container {
                    display: flex;
                    justify-content: center;
                    margin-top: 30px;
                    gap: 40px;
                }
                .card {
                    background-color: white;
                    border-radius: 10px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    padding: 30px;
                    width: 300px;
                    text-align: center;
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                }
                .card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                }
                .card-icon {
                    font-size: 64px;
                    margin-bottom: 20px;
                }
                .card-title {
                    font-size: 24px;
                    margin-bottom: 15px;
                    color: #0d6efd;
                }
                .card-text {
                    color: #6c757d;
                    margin-bottom: 20px;
                }
                .btn {
                    display: inline-block;
                    padding: 12px 20px;
                    background-color: #0d6efd;
                    color: white;
                    border-radius: 5px;
                    text-decoration: none;
                    font-weight: bold;
                    transition: transform 0.3s ease;
                    cursor: pointer;
                }
                .btn:hover {
                    background-color: #0b5ed7;
                }
                .footer {
                    margin-top: 40px;
                    color: #6c757d;
                    font-size: 14px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Welcome to Document Scanner</h1>
                <p>A powerful tool for scanning and extracting information from your documents using AI.</p>

                <div class="card-container">
                    <div class="card">
                        <div class="card-icon">ðŸ›‚</div>
                        <h2 class="card-title">Passport</h2>
                        <p class="card-text">Scan and extract information from passport documents.</p>
                        <a href="myapp:///passport" class="btn">Scan Passport</a>
                    </div>

                    <div class="card">
                        <div class="card-icon">ðŸªª</div>
                        <h2 class="card-title">Aadhaar</h2>
                        <p class="card-text">Scan and extract information from Aadhaar card documents.</p>
                        <a href="myapp:///aadhaar" class="btn">Scan Aadhaar</a>
                    </div>
                </div>

                <div class="footer">
                    <p>Powered by Gemini AI</p>
                </div>
            </div>

        </body>
        </html>
        """

        self.html_frame.load_html(html_content)

        # Bind to the <Hyperlink> event - CORRECTED EVENT NAME
        self.html_frame.bind("<<TKWebLink>>", self.handle_link_click)

    def handle_link_click(self, event):
        url = event.widget.get_url()
        print(f"Link clicked: {url}")

        try:
            parsed_url = urllib.parse.urlparse(url)
            if parsed_url.scheme == "myapp":
                if parsed_url.path == "/passport":
                    self.open_passport_window()
                elif parsed_url.path == "/aadhaar":
                    self.open_aadhaar_window()
                else:
                    print(f"Unknown myapp URL path: {parsed_url.path}")
            else:
                print(f"Unknown URL scheme: {parsed_url.scheme}")

        except Exception as e:
            print(f"Error handling link click: {e}")

    def show_about_dialog(self):
        about_window = ttk.Toplevel(self.root)
        about_window.title("About Document Scanner")
        about_window.geometry("400x300")

        about_frame = ttk.Frame(about_window, padding=20)
        about_frame.pack(fill=BOTH, expand=YES)

        ttk.Label(about_frame, text="Document Scanner", font=("Arial", 16, "bold")).pack(pady=(0, 10))
        ttk.Label(about_frame, text="Version 1.0.0", font=("Arial", 12)).pack(pady=(0, 20))
        ttk.Label(about_frame,
                  text="A powerful tool for scanning and extracting information from documents using Gemini AI.",
                  wraplength=350).pack(pady=(0, 20))
        ttk.Label(about_frame, text="Â© 2025 Document Scanner", font=("Arial", 10)).pack(pady=(0, 10))

        ttk.Button(about_frame, text="Close", bootstyle="primary", command=about_window.destroy).pack()

    def select_files(self, file_list):
        files = filedialog.askopenfilenames(
            title="Select files",
            initialdir="C:",
            multiple=True,
            filetypes=[("Image files", "*.jpg *.jpeg *.png")]
        )
        if files:
            file_list.delete(0, tk.END)
            for file in files:
                file_list.insert(tk.END, file)

            self.selected_files = [file_list.get(i) for i in range(file_list.size())]
            self.no_of_selected_files = file_list.size()
        return files

    def process_document(self, filename, doc_type):
        filename_without_ext = os.path.splitext(os.path.basename(filename))[0]
        json_filename = os.path.join(self.output_directory, f"{filename_without_ext}.json")

        # Show loading indicator
        loading_window = ttk.Toplevel(self.root)
        loading_window.title("Processing")
        loading_window.geometry("300x100")
        ttk.Label(loading_window, text=f"Processing {os.path.basename(filename)}...",
                  font=("Arial", 12)).pack(pady=(20, 0))
        progress = ttk.Progressbar(loading_window, mode="indeterminate", bootstyle="primary")
        progress.pack(fill=X, padx=20, pady=10)
        progress.start()
        loading_window.update()

        try:
            gemini_data = call_gemini_api(filename, doc_type)
            with open(json_filename, "w", encoding="utf-8") as filejson:
                json.dump(gemini_data, filejson, indent=4, ensure_ascii=False)
            print(f"JSON file created at: {json_filename}")
            loading_window.destroy()
            return filename
        except Exception as e:
            print(f"Error processing {filename}: {e}")
            data_dict = {"error": str(e)}
            with open(json_filename, "w", encoding="utf-8") as filejson:
                json.dump(data_dict, filejson, indent=4, ensure_ascii=False)
            loading_window.destroy()
            return filename

    def convert_image_to_base64(self, image_path):
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"Error converting image to base64: {e}")
            return None

    def viewer(self, address, doc_type, index):
        data = {}
        filename = os.path.basename(address)
        filename_without_ext = os.path.splitext(filename)[0]
        json_file_name = os.path.join(self.output_directory, f"{filename_without_ext}.json")

        try:
            with open(json_file_name, 'r', encoding="utf-8") as file:
                data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error loading JSON from {json_file_name}: {e}")
            data = {"error": str(e)}

        # Create a new window for the viewer
        viewer_window = ttk.Toplevel(self.root)
        window_title = {
            "passport_front": "Passport Details (Front)",
            "passport_back": "Passport Details (Back)",
            "digi_aadhaar": "Aadhaar Details (DIGILOCKER)",
            "small_aadhaar": "Aadhaar Details (Original)"
        }.get(doc_type, "Document Details")

        viewer_window.title(window_title)
        viewer_window.geometry("1200x800")

        # Create main frame
        main_frame = ttk.Frame(viewer_window)
        main_frame.pack(fill=BOTH, expand=YES)

        # Create navbar
        navbar = ttk.Frame(main_frame, bootstyle="primary")
        navbar.pack(fill=X, side=TOP)

        # Logo and title
        title_frame = ttk.Frame(navbar, bootstyle="primary")
        title_frame.pack(side=LEFT, padx=10, pady=5)

        title_label = ttk.Label(title_frame, text=window_title, font=("Arial", 16, "bold"), bootstyle="inverse-primary")
        title_label.pack(side=LEFT)

        # Content area
        content_frame = ttk.Frame(main_frame, padding=20)
        content_frame.pack(fill=BOTH, expand=YES)

        # Create a Panedwindow
        paned = ttk.PanedWindow(content_frame, orient=HORIZONTAL)
        paned.pack(fill=BOTH, expand=YES)

        # Left pane for image
        image_frame = ttk.Frame(paned)
        paned.add(image_frame, weight=1)

        # Right pane for data
        data_frame = ttk.Frame(paned)
        paned.add(data_frame, weight=1)

        # Convert image to base64 for HTML display
        image_base64 = self.convert_image_to_base64(address)

        # Create HTML frame for image viewer
        image_html_frame = HtmlFrame(image_frame)
        image_html_frame.pack(fill=BOTH, expand=YES)

        # Load HTML content for image viewer
        if image_base64:
            image_ext = os.path.splitext(address)[1].lower()
            mime_type = "image/jpeg" if image_ext in ['.jpg', '.jpeg'] else "image/png"
            image_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <style>
                    body {{
                        margin: 0;
                        padding: 0;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        background-color: #f0f0f0;
                    }}
                    .image-container {{
                        max-width: 100%;
                        max-height: 100%;
                        overflow: auto;
                        background-color: white;
                        box-shadow: 0 0 10px rgba(0,0,0,0.1);
                        padding: 10px;
                    }}
                    img {{
                        max-width: 100%;
                        display: block;
                    }}
                    .zoom-controls {{
                        position: absolute;
                        top: 10px;
                        right: 10px;
                        display: flex;
                        gap: 5px;
                    }}
                    .zoom-btn {{
                        width: 30px;
                        height: 30px;
                        background-color: rgba(255, 255, 255, 0.8);
                        border: 1px solid #ccc;
                        border-radius: 50%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        cursor: pointer;
                        font-weight: bold;
                        font-size: 16px;
                    }}
                </style>
            </head>
            <body>
                <div class="image-container">
                    <img id="document-image" src="data:{mime_type};base64,{image_base64}" alt="Document Image">
                </div>
                <div class="zoom-controls">
                    <div class="zoom-btn" onclick="zoomIn()">+</div>
                    <div class="zoom-btn" onclick="zoomOut()">-</div>
                </div>

                <script>
                    let scale = 1;
                    const image = document.getElementById('document-image');

                    function zoomIn() {{
                        scale += 0.1;
                        image.style.transform = `scale(${{scale}})`;
                    }}

                    function zoomOut() {{
                        if (scale > 0.5) {{
                            scale -= 0.1;
                            image.style.transform = `scale(${{scale}})`;
                        }}
                    }}
                </script>
            </body>
            </html>
            """
            image_html_frame.load_html(image_html)
        else:
            ttk.Label(image_frame, text="Image not found or could not be loaded",
                      font=("Arial", 14)).pack(pady=20)

        # Create HTML frame for data viewer
        data_html_frame = HtmlFrame(data_frame)
        data_html_frame.pack(fill=BOTH, expand=YES)

        # Format JSON data for display
        formatted_data = json.dumps(data, indent=4)

        # Load HTML content for data viewer
        data_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f8f9fa;
                }}
                .json-container {{
                    background-color: white;
                    border-radius: 5px;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                    padding: 20px;
                    max-height: 100%;
                    overflow: auto;
                }}
                h2 {{
                    color: #0d6efd;
                    margin-top: 0;
                }}
                pre {{
                    background-color: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    overflow: auto;
                    white-space: pre-wrap;
                }}
                .btn {{
                    display: inline-block;
                    padding: 10px 15px;
                    background-color: #0d6efd;
                    color: white;
                    border-radius: 5px;
                    text-decoration: none;
                    font-weight: bold;
                    transition: transform 0.3s ease;
                    cursor: pointer;
                    margin-right: 10px;
                    margin-top: 10px;
                }}
                .btn:hover {{
                    background-color: #0b5ed7;
                }}
                .btn-secondary {{
                    background-color: #6c757d;
                }}
                .btn-secondary:hover {{
                    background-color: #5a6268;
                }}
                .btn-danger {{
                    background-color: #dc3545;
                }}
                .btn-danger:hover {{
                    background-color: #bb2d3b;
                }}
                textarea {{
                    width: 100%;
                    height: 300px;
                    padding: 10px;
                    border: 1px solid #ced4da;
                    border-radius: 5px;
                    font-family: monospace;
                    margin-bottom: 10px;
                }}
            </style>
        </head>
        <body>
            <div class="json-container">
                <h2>Extracted Data</h2>
                <textarea id="json-editor">{formatted_data}</textarea>
                <a href="myapp://save_json" class="btn">Save Changes</a>
                <button class="btn btn-secondary" onclick="window.close()">Close</button>
                <button class="btn btn-danger" onclick="window.close()">Exit</button>
            </div>

            <script>
                function saveChanges() {{
                    const jsonData = document.getElementById('json-editor').value;
                     window.location.href = 'myapp://save_json?' + encodeURIComponent(jsonData);
                }}
            </script>
        </body>
        </html>
        """
        data_html_frame.load_html(data_html)

        # Bind to the <Hyperlink> event
        data_html_frame.bind("<<TKWebLink>>", lambda event: self.handle_viewer_link_click(event, json_file_name, viewer_window))


    def handle_viewer_link_click(self, event, json_file_name, viewer_window):
        url = event.widget.get_url()
        print(f"Link clicked: {url}")
        if url.startswith("myapp://save_json"):
             json_data = url.split("?", 1)[1] # Extract JSON data from URL
             self.save_json_changes(json_data, json_file_name)
        elif url == 'myapp://closeViewer':
             viewer_window.destroy()
        elif url == 'myapp://exitApp':
             self.root.quit()
        else:
           print(f"Unknown URL clicked in viewer window: {url}")
    def save_json_changes(self, json_data, json_file_name):
        try:
            data = json.loads(json_data)
            with open(json_file_name, 'w', encoding="utf-8") as file:
                json.dump(data, file, indent=4, ensure_ascii=False)
            messagebox.showinfo("Success", "Changes saved successfully!")
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON: {e}")
            messagebox.showerror("Error", "Invalid JSON. Please check your data.")

    def process_and_view(self, selected_files, doc_type, file_list_window):
        self.no_of_selected_files = len(selected_files)
        index = self.no_of_selected_files - 1

        while index >= 0:
            filename = selected_files[index]
            try:
                address = self.process_document(filename, doc_type)
                if address:
                    self.viewer(address, doc_type, index)
            except Exception as e:
                print(f"An error occurred during processing of {filename}: {e}")
                messagebox.showerror("Error",
                                     f"An error occurred during processing of {os.path.basename(filename)}: {e}")
            index -= 1

        if index < 0:
            self.no_of_selected_files = 0

        file_list_window.destroy()

    def open_multi_file_selector(self, doc_type):
        file_list_window = ttk.Toplevel(self.root)
        file_list_window.title("Select Documents")
        file_list_window.geometry("800x600")

        # Create HTML frame for file selector
        self.file_selector_html_frame = HtmlFrame(file_list_window)
        self.file_selector_html_frame.pack(fill=BOTH, expand=YES)

        # Load HTML content for file selector
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f8f9fa;
                }}
                h2 {{
                    color: #0d6efd;
                    margin-bottom: 20px;
                }}
                .file-list-container {{
                    background-color: white;
                    border-radius: 5px;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                    padding: 20px;
                    margin-bottom: 20px;
                    min-height: 300px;
                }}
                .file-list {{
                    width: 100%;
                    height: 300px;
                    border: 1px solid #ced4da;
                    border-radius: 5px;
                    overflow-y: auto;
                    padding: 10px;
                }}
                .file-item {{
                    padding: 10px;
                    border-bottom: 1px solid #e9ecef;
                }}
                .file-item:last-child {{
                    border-bottom: none;
                }}
                .btn-container {{
                    display: flex;
                    justify-content: space-between;
                    margin-top: 20px;
                }}
                .btn {{
                    display: inline-block;
                    padding: 12px 20px;
                    background-color: #0d6efd;
                    color: white;
                    border-radius: 5px;
                    text-decoration: none;
                    font-weight: bold;
                    transition: transform 0.3s ease;
                    cursor: pointer;
                }}
                .btn:hover {{
                    background-color: #0b5ed7;
                }}
                .btn-secondary {{
                    background-color: #6c757d;
                }}
                .btn-secondary:hover {{
                    background-color: #5a6268;
                }}
                .btn-success {{
                    background-color: #198754;
                }}
                .btn-success:hover {{
                    background-color: #157347;
                }}
                .btn-danger {{
                    background-color: #dc3545;
                }}
                .btn-danger:hover {{
                    background-color: #bb2d3b;
                }}
                .doc-type {{
                    color: #0d6efd;
                    font-weight: bold;
                }}
            </style>
        </head>
        <body>
            <h2>Select {doc_type.replace('_', ' ').title()} Files</h2>

            <div class="file-list-container">
                <p>Select one or more files to process:</p>
                <div class="file-list" id="file-list">
                    <p>No files selected</p>
                </div>
            </div>

            <div class="btn-container">
                <button class="btn" id="select-files-btn">Select Files</button>
                <button class="btn btn-success" id="process-btn">Process Files</button>
            </div>

            <div class="btn-container">
                <button class="btn btn-secondary" id="back-btn">Back</button>
                <button class="btn btn-danger" id="exit-btn">Exit</button>
            </div>

            <script>
                 document.getElementById('select-files-btn').addEventListener('click', function() {{
                    window.location.href = 'myapp://selectFiles';
                }});

                document.getElementById('process-btn').addEventListener('click', function() {{
                      window.location.href = 'myapp://processFiles';
                }});

                document.getElementById('back-btn').addEventListener('click', function() {{
                      window.location.href = 'myapp://closeFileSelector';
                }});

                document.getElementById('exit-btn').addEventListener('click', function() {{
                      window.location.href = 'myapp://exitApp';
                }});

                function updateFileList(files) {{
                    selectedFiles = files;
                    const fileList = document.getElementById('file-list');

                    if (files.length === 0) {{
                        fileList.innerHTML = '<p>No files selected</p>';
                        return;
                    }}

                    let html = '';
                    files.forEach((file, index) => {{
                        html += `<div class="file-item">${{index + 1}}. ${{file}}</div>`;
                    }});

                    fileList.innerHTML = html;
                }}


            </script>
        </body>
        </html>
        """

        self.file_selector_html_frame.load_html(html_content)

        # Create a listbox to store selected files (hidden)
        self.file_list = tk.Listbox(file_list_window) # Make it an instance variable
        self.file_list.pack_forget()  # Hide the listbox

        # Bind to the <Hyperlink> event - CORRECTED EVENT NAME
        self.file_selector_html_frame.bind("<<TKWebLink>>", lambda event: self.handle_file_selector_link_click(event, doc_type, file_list_window))

    def handle_file_selector_link_click(self, event, doc_type, file_list_window):
        url = event.widget.get_url()
        print(f"File Selector Link Clicked: {url}")

        if url == "myapp://selectFiles":
            self.select_files_and_update_ui(self.file_list, doc_type)
        elif url == "myapp://processFiles":
            self.process_selected_files(self.file_list, doc_type, file_list_window)
        elif url == "myapp://closeFileSelector":
             file_list_window.destroy()
        elif url == "myapp://exitApp":
             self.root.quit()
        else:
           print(f"Unknown URL clicked in file selector: {url}")

    def select_files_and_update_ui(self, file_list,  doc_type):
        # ... (previous code) ...
        files = self.select_files(file_list)
        if files:
            # Update the HTML list with selected files
            file_list_string = json.dumps(files)
            script = f"updateFileList({file_list_string})"

            try:
                self.file_selector_html_frame.run_script(script)  # Use run_script
            except Exception as e:
                print(f"Error running script: {e}")

    def process_selected_files(self, file_list, doc_type, file_list_window):
        selected_files = [file_list.get(i) for i in range(file_list.size())]
        if selected_files:
            self.process_and_view(selected_files, doc_type, file_list_window)
        else:
            print("No files selected.")
            messagebox.showinfo("Info", "No files were selected.")
            file_list_window.destroy()

    def open_passport_window(self):
        self.clear_main_content()

        content_frame = ttk.Frame(self.main_frame)
        content_frame.pack(fill=BOTH, expand=YES, padx=20, pady=20)

        # Create a new HtmlFrame for the passport window
        self.passport_html_frame = HtmlFrame(content_frame)
        self.passport_html_frame.pack(fill=BOTH, expand=YES)

        html_content = """
                <!DOCTYPE html>
                <html>
                <head>
                    <style>
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            margin: 0;
                            padding: 0;
                            background-color: #f8f9fa;
                            color: #212529;
                        }
                        .container {
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                            text-align: center;
                        }
                        h1 {
                            color: #0d6efd;
                            margin-bottom: 30px;
                            font-size: 36px;
                        }
                        .card-container {
                            display: flex;
                            justify-content: center;
                            margin-top: 30px;
                            gap: 40px;
                        }
                        .card {
                            background-color: white;
                            border-radius: 10px;
                            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                            padding: 30px;
                            width: 300px;
                            text-align: center;
                            transition: transform 0.3s ease, box-shadow 0.3s ease;
                        }
                        .card:hover {
                            transform: translateY(-5px);
                            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                        }
                        .card-icon {
                            font-size: 64px;
                            margin-bottom: 20px;
                        }
                        .card-title {
                            font-size: 24px;
                            margin-bottom: 15px;
                            color: #0d6efd;
                        }
                        .card-text {
                            color: #6c757d;
                            margin-bottom: 20px;
                        }
                        .btn {
                            display: inline-block;
                            padding: 12px 20px;
                            background-color: #0d6efd;
                            color: white;
                            border-radius: 5px;
                            text-decoration: none;
                            font-weight: bold;
                            transition: transform 0.3s ease;
                            cursor: pointer;
                        }
                        .btn:hover {
                            background-color: #0b5ed7;
                        }
                        .footer {
                            margin-top: 40px;
                            color: #6c757d;
                            font-size: 14px;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>Passport Scanner</h1>
                        <p>Select the type of passport file you want to scan.</p>

                        <div class="card-container">
                            <div class="card">
                                <div class="card-icon">ðŸ›‚</div>
                                <h2 class="card-title">Front Page</h2>
                                <p class="card-text">Scan and extract information from the front page of the passport.</p>
                                <a href="myapp:///passport_front" class="btn" id="passport-front-btn">Scan Front Page</a>
                            </div>

                            <div class="card">
                                <div class="card-icon">ðŸ“„</div>
                                <h2 class="card-title">Back Page</h2>
                                <p class="card-text">Scan and extract information from the back page of the passport.</p>
                                <a href="myapp:///passport_back" class="btn" id="passport-back-btn">Scan Back Page</a>
                            </div>
                        </div>
                        <div class="btn-container">
                            <a href="myapp:///createWelcomeScreen" class="btn btn-secondary" id="back-btn">Back</a>
                            <a href="myapp:///exitApp" class="btn btn-danger" id="exit-btn">Exit</a>
                        </div>
                        <div class="footer">
                            <p>Powered by Gemini AI</p>
                        </div>
                    </div>

                </body>
                </html>
                """

        self.passport_html_frame.load_html(html_content)
        # Bind the <<TKWebLink>> event in the passport window
        self.passport_html_frame.bind("<<TKWebLink>>", self.handle_passport_link_click)

    def handle_passport_link_click(self, event):
        url = event.widget.get_url()
        print(f"Passport Link Clicked: {url}")
        try:
            parsed_url = urllib.parse.urlparse(url)
            if parsed_url.scheme == "myapp":
                if parsed_url.path == "/passport_front":
                    self.open_multi_file_selector('passport_front')
                elif parsed_url.path == "/passport_back":
                    self.open_multi_file_selector('passport_back')
                elif parsed_url.path == "/createWelcomeScreen":
                    self.create_welcome_screen()
                elif parsed_url.path == "/exitApp":
                    self.root.quit()
                else:
                    print(f"Unknown myapp URL path in passport window: {parsed_url.path}")
            else:
                print(f"Unknown URL scheme in passport window: {parsed_url.scheme}")
        except Exception as e:
            print(f"Error handling passport link click: {e}")

    def open_aadhaar_window(self):
        self.clear_main_content()

        content_frame = ttk.Frame(self.main_frame)
        content_frame.pack(fill=BOTH, expand=YES, padx=20, pady=20)

        # Create a new HtmlFrame for the aadhaar window
        self.aadhaar_html_frame = HtmlFrame(content_frame)
        self.aadhaar_html_frame.pack(fill=BOTH, expand=YES)

        html_content = """
                <!DOCTYPE html>
                <html>
                <head>
                    <style>
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            margin: 0;
                            padding: 0;
                            background-color: #f8f9fa;
                            color: #212529;
                        }
                        .container {
                            max-width: 800px;
                            margin: 0 auto;
                            padding: 20px;
                            text-align: center;
                        }
                        h1 {
                            color: #0d6efd;
                            margin-bottom: 30px;
                            font-size: 36px;
                        }
                        .card-container {
                            display: flex;
                            justify-content: center;
                            margin-top: 30px;
                            gap: 40px;
                        }
                        .card {
                            background-color: white;
                            border-radius: 10px;
                            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                            padding: 30px;
                            width: 300px;
                            text-align: center;
                            transition: transform 0.3s ease, box-shadow 0.3s ease;
                        }
                        .card:hover {
                            transform: translateY(-5px);
                            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                        }
                        .card-icon {
                            font-size: 64px;
                            margin-bottom: 20px;
                        }
                        .card-title {
                            font-size: 24px;
                            margin-bottom: 15px;
                            color: #0d6efd;
                        }
                        .card-text {
                            color: #6c757d;
                            margin-bottom: 20px;
                        }
                        .btn {
                            display: inline-block;
                            padding: 12px 20px;
                            background-color: #0d6efd;
                            color: white;
                            border-radius: 5px;
                            text-decoration: none;
                            font-weight: bold;
                            transition: transform 0.3s ease;
                            cursor: pointer;
                        }
                        .btn:hover {
                            background-color: #0b5ed7;
                        }
                        .footer {
                            margin-top: 40px;
                            color: #6c757d;
                            font-size: 14px;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>Aadhaar Scanner</h1>
                        <p>Select the type of Aadhaar file you want to scan.</p>

                        <div class="card-container">
                            <div class="card">
                                <div class="card-icon">ðŸ†”</div>
                                <h2 class="card-title">DigiLocker Format</h2>
                                <p class="card-text">Scan and extract information from the DigiLocker format Aadhaar file.</p>
                                <a href="myapp:///digi_aadhaar" class="btn" id="digilocker-btn">Scan DigiLocker</a>
                            </div>

                            <div class="card">
                                <div class="card-icon">ðŸ’³</div>
                                <h2 class="card-title">Original Format</h2>
                                <p class="card-text">Scan and extract information from the original format Aadhaar card.</p>
                                <a href="myapp:///small_aadhaar" class="btn" id="original-btn">Scan Original</a>
                            </div>
                        </div>
                        <div class="btn-container">
                           <a href="myapp:///createWelcomeScreen" class="btn btn-secondary" id="back-btn">Back</a>
                           <a href="myapp:///exitApp" class="btn btn-danger" id="exit-btn">Exit</a>
                        </div>
                        <div class="footer">
                            <p>Powered by Gemini AI</p>
                        </div>
                    </div>

                </body>
                </html>
                """

        self.aadhaar_html_frame.load_html(html_content)
        self.aadhaar_html_frame.bind("<<TKWebLink>>", self.handle_aadhaar_link_click)

    def handle_aadhaar_link_click(self, event):
        url = event.widget.get_url()
        print(f"Aadhaar Link Clicked: {url}")
        try:
            parsed_url = urllib.parse.urlparse(url)
            if parsed_url.scheme == "myapp":
                if parsed_url.path == "/digi_aadhaar":
                    self.open_multi_file_selector('digi_aadhaar')
                elif parsed_url.path == "/small_aadhaar":
                    self.open_multi_file_selector('small_aadhaar')
                elif parsed_url.path == "/createWelcomeScreen":
                    self.create_welcome_screen()
                elif parsed_url.path == "/exitApp":
                    self.root.quit()
                else:
                    print(f"Unknown myapp URL path in aadhaar window: {parsed_url.path}")
            else:
                print(f"Unknown URL scheme in aadhaar window: {parsed_url.scheme}")
        except Exception as e:
            print(f"Error handling aadhaar link click: {e}")

    if __name__ == "__main__":
        root = ttk.Window(title="Document Scanner", themename="cosmo")
        app = DocumentScannerApp(root)
        root.mainloop()
